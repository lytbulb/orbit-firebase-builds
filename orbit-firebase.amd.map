{"version":3,"sources":["orbit-firebase/cache-source.js","orbit-firebase/firebase-client.js","orbit-firebase/firebase-connector.js","orbit-firebase/firebase-listener.js","orbit-firebase/firebase-requester.js","orbit-firebase/firebase-serializer.js","orbit-firebase/firebase-source.js","orbit-firebase/firebase-transformer.js","orbit-firebase/lib/array-utils.js","orbit-firebase/lib/cache-utils.js","orbit-firebase/lib/object-utils.js","orbit-firebase/lib/operation-utils.js","orbit-firebase/lib/schema-utils.js","orbit-firebase/operation-decomposer.js","orbit-firebase/operation-matcher.js","orbit-firebase/operation-sequencer.js","orbit-firebase/subscriptions/attribute-subscription.js","orbit-firebase/subscriptions/has-many-subscription.js","orbit-firebase/subscriptions/has-one-subscription.js","orbit-firebase/subscriptions/options.js","orbit-firebase/subscriptions/record-subscription.js","orbit-firebase/transformations.js","orbit-firebase/transformers/add-record.js","orbit-firebase/transformers/add-to-has-many.js","orbit-firebase/transformers/add-to-has-one.js","orbit-firebase/transformers/remove-from-has-many.js","orbit-firebase/transformers/remove-has-one.js","orbit-firebase/transformers/remove-record.js","orbit-firebase/transformers/replace-attribute.js","orbit-firebase/transformers/replace-has-many.js","orbit-firebase/transformers/update-meta.js"],"sourcesContent":["define('orbit-firebase/cache-source', ['exports', 'orbit/transformable', 'orbit/lib/objects'], function (exports, Transformable, objects) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(cache){\n\t\t\tTransformable['default'].extend(this);\n\t\t\tthis._cache = cache;\n\t\t\tobjects.expose(this, this._cache, ['retrieve']);\n\t\t},\n\n\t\t_transform: function(operations){\n\t\t\tvar _this = this;\n\t\t\toperations = objects.isArray(operations) ? operations : [operations];\n\n\t\t\toperations.forEach(function(operation){\n\t\t\t\t_this._cache.transform(operation);\n\t\t\t});\n\t\t}\n\t});\n\n});","define('orbit-firebase/firebase-client', ['exports', 'orbit/lib/objects', 'orbit/main', 'orbit-firebase/lib/array-utils'], function (exports, objects, Orbit, array_utils) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseRef){\n\t\t\tthis.firebaseRef = firebaseRef;\n\t\t},\n\n\t\tauthenticateAdmin: function(secret){\n\t\t\treturn this._authenticate(secret);\n\t\t},\n\n\t\tauthenticateUser: function(secret, userDetails){\n\t\t\tvar tokenGenerator = new FirebaseTokenGenerator(secret);\n\t    var userToken = tokenGenerator.createToken(userDetails);\n\t    return this._authenticate(userToken);\n\t\t},\n\n\t\t_authenticate: function(token){\n\t\t\tvar _this = this;\n\t\t\treturn new Orbit['default'].Promise(function(resolve, reject){\n\t\t\t\t_this.firebaseRef.authWithCustomToken(token, function(error){\n\t\t\t\t\tif(error){\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\tset: function(path, value){\n\t\t\tpath = this._normalizePath(path);\n\n\t\t\tvar _this = this;\n\t\t\treturn new Orbit['default'].Promise(function(resolve, reject){\n\t\t\t\tvalue = value || null; // undefined causes error in firebase client\n\t\t\t\t_this.firebaseRef.child(path).set(value, function(error){\n\t\t\t\t\terror ? reject(error) : resolve(value); // jshint ignore:line\n\t\t\t\t});\n\t\t\t});\n\n\t\t},\n\n\t\tpush: function(path, value){\n\t\t\tvar _this = this;\n\t\t\treturn new Promise(function(resolve, reject){\n\t\t\t\t_this.firebaseRef.child(path).push(value, function(error){\n\t\t\t\t\tif(error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\tremove: function(path){\n\t\t\tvar _this = this;\n\t\t\tpath = this._normalizePath(path);\n\n\t\t\treturn new Orbit['default'].Promise(function(resolve, reject){\n\t\t\t\t_this.firebaseRef.child(path).remove(function(error){\n\t\t\t\t\terror ? reject(error) : resolve(); // jshint ignore:line\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\tvalueAt: function(path){\n\t\t\tvar _this = this;\n\t\t\tpath = this._normalizePath(path);\n\n\t\t\treturn new Orbit['default'].Promise(function(resolve, reject){\n\t\t\t\t_this.firebaseRef.child(path).once('value', function(snapshot){\n\n\t\t\t\t\tresolve(snapshot.val());\n\n\t\t\t\t}, function(error){\n\t\t\t\t\treject(error);\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\tremoveFromArray: function(arrayPath, value){\n\t\t\tvar _this = this;\n\n\t\t\treturn this.valueAt(arrayPath).then(function(array){\n\t\t\t\tif(!array) return;\n\n\t\t\t\tvar index = array.indexOf(value);\n\t\t\t\tif(index === -1) return Orbit['default'].resolve();\n\n\t\t\t\tarray.splice(index, 1);\n\t\t\t\treturn _this.set(arrayPath, array);\n\t\t\t});\n\t\t},\n\n\t\tremoveFromArrayAt: function(arrayPath, index){\n\t\t\tvar _this = this;\n\t\t\tarrayPath = this._normalizePath(arrayPath);\n\n\t\t\treturn this.valueAt(arrayPath).then(function(array){\n\t\t\t\tif(!array) return;\n\n\t\t\t\tarray = array_utils.removeAt(array, index);\n\t\t\t\treturn _this.set(arrayPath, array);\n\t\t\t});\n\t\t},\n\n\t\tappendToArray: function(arrayPath, value){\n\t\t\tvar _this = this;\n\t\t\tarrayPath = this._normalizePath(arrayPath);\n\n\t\t\treturn _this.valueAt(arrayPath).then(function(array){\n\t\t\t\tarray = array || [];\n\t\t\t\tif(array.indexOf(value) === -1){\n\t\t\t\t\tarray.push(value);\n\t\t\t\t}\n\t\t\t\treturn _this.set(arrayPath, array);\n\n\t\t\t});\n\t\t},\n\n\t    _normalizePath: function(path) {\n\t    \treturn (typeof path === 'string') ? path : path.join('/');\n\t    },\n\t});\n\n});","define('orbit-firebase/firebase-connector', ['exports', 'orbit-common/main', 'orbit/transform-connector', 'orbit-common/operation-encoder', 'orbit/lib/eq', 'orbit-common/lib/exceptions'], function (exports, OC, TransformConnector, OperationEncoder, eq, exceptions) {\n\n  'use strict';\n\n  exports['default'] = TransformConnector['default'].extend({\n    init: function(source, target, schema, options){\n      this._super(source, target, options);\n      this._operationEncoder = new OperationEncoder['default'](schema);\n    },\n\n    transform: function(operation) {\n      // console.log('****', ' transform from ', this.source.id, ' to ', this.target.id, operation);\n\n      var _this = this;\n\n      // If the target is currently processing a transformation and this\n      // operation does not belong to that transformation, then wait for the\n      // transformation to complete before applying this operation.\n      //\n      // This will be called recursively to process multiple transformations if\n      // necessary.\n      var currentTransformation = this.target.currentTransformation();\n      if (currentTransformation && !currentTransformation.verifyOperation(operation)) {\n        // console.log('>>>> TransformConnector#transform - waiting', this.source.id, this.target.id, operation);\n        return currentTransformation.process().then(function() {\n          // console.log('<<<< TransformConnector#transform - done waiting', _this.source.id, _this.target.id, operation);\n          return _this.transform(operation);\n        });\n      }\n\n      var operations = this.buildTransformation(operation);\n      return this.target.transform(operations);\n    },\n\n    buildTransformation: function(operation){\n      var operationType = this._operationEncoder.identify(operation);\n\n      var record = this.target.retrieve([operation.path[0], operation.path[1]]);\n      var currentValue = this.target.retrieve(operation.path);\n      if (eq.eq(currentValue, operation.value)) return [];\n\n      switch(operationType){\n        case 'addRecord': return record ? [] : [operation];\n        case 'replaceRecord': return [operation];\n        case 'addHasMany': return this._modifyLinkValue(operation, record, currentValue);\n        case 'replaceHasMany': return this._replaceLinkValue(operation, record);\n        case 'removeHasMany': return this._modifyLinkValue(operation, record, currentValue);\n        case 'addHasOne': return this._modifyLinkValue(operation, record, currentValue);\n        case 'replaceHasOne': return this._replaceLinkValue(operation, record);\n        case 'removeHasOne': return this._modifyLinkValue(operation, record, currentValue);\n        case 'addToHasMany': return this._modifyHasManyContents(operation, record);\n        case 'removeFromHasMany': return this._modifyHasManyContents(operation, record);\n        default: return [operation];\n      }\n    },\n\n    _replaceLinkValue: function(operation, record){\n      return record ? [operation] : [];\n    },\n\n    _modifyLinkValue: function(operation, record, currentValue){\n      return record && currentValue === OC['default'].LINK_NOT_INITIALIZED ? [operation] : [];\n    },\n\n    _modifyHasManyContents: function(operation, record){\n      var linkPath = operation.path.slice(0,4);\n      var linkValue = this.target.retrieve(linkPath);\n\n      if(linkValue === OC['default'].LINK_NOT_INITIALIZED) {\n        throw new exceptions.LinkNotInitializedException(operation.path[0], operation.path[1], operation.path[3]);\n      }\n\n      return record ? [operation] : [];\n    }\n  });\n\n});","define('orbit-firebase/firebase-listener', ['exports', 'orbit/lib/objects', 'orbit/lib/eq', 'orbit/evented', 'orbit-firebase/lib/schema-utils', 'orbit/operation', 'orbit-firebase/firebase-client', 'orbit/main', 'orbit-firebase/lib/array-utils', 'orbit-firebase/subscriptions/record-subscription', 'orbit-firebase/subscriptions/attribute-subscription', 'orbit-firebase/subscriptions/has-many-subscription', 'orbit-firebase/subscriptions/has-one-subscription', 'orbit-firebase/subscriptions/options'], function (exports, objects, eq, Evented, SchemaUtils, Operation, FirebaseClient, Orbit, array_utils, RecordSubscription, AttributeSubscription, HasManySubscription, HasOneSubscription, subscriptions__options) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseRef, schema, serializer){\n\t\t\tEvented['default'].extend(this);\n\n\t\t\tthis._firebaseRef = firebaseRef;\n\t\t\tthis._firebaseClient = new FirebaseClient['default'](this._firebaseRef);\n\t\t\tthis._schema = schema;\n\t\t\tthis._schemaUtils = new SchemaUtils['default'](schema);\n\t\t\tthis._serializer = serializer;\n\n\t\t\tthis._listeners = {};\n\t\t\tthis._listenerInitializers = {};\n\t\t\tthis._subscriptions = {};\n\t\t},\n\n\t\tsubscribeToType: function(type, _, subscriptionOptions){\n\t\t\tvar _this = this;\n\t\t\tvar typeRef = this._firebaseRef.child('type');\n\t\t\tsubscriptionOptions = subscriptions__options.buildOptions(subscriptionOptions);\n\n\t\t\tthis._enableListener(type, 'child_added', function(snapshot){\n\t\t\t\tvar record = snapshot.val();\n\t\t\t\t_this.subscribeToRecord(type, record.id, subscriptionOptions);\n\t\t\t});\n\t\t},\n\n\t\tsubscribeToRecords: function(type, ids, options){\n\t\t\tvar _this = this;\n\t\t\tvar promises = array_utils.map(ids, function(id){\n\t\t\t\treturn _this.subscribeToRecord(type, id, options);\n\t\t\t});\n\n\t\t\treturn this._settleAllPermitted(promises);\n\t\t},\n\n\t\t_settleAllPermitted: function(promises){\n\t\t\treturn new Orbit['default'].Promise(function(resolve, reject){\n\t\t\t\treturn Orbit['default'].allSettled(promises).then(function(settled){\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tsettled.forEach(function(promiseResult){\n\t\t\t\t\t\tif(promiseResult.state === 'rejected'){\n\t\t\t\t\t\t\tif(promiseResult.reason.code === 'PERMISSION_DENIED'){\n\t\t\t\t\t\t\t\t// filter out values that have access denied\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthrow new Error(promiseResult.reason);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(promiseResult.state === 'fulfilled'){\n\t\t\t\t\t\t\tvalues.push(promiseResult.value);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tresolve(values);\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\tsubscribeToRecord: function(type, id, subscriptionOptions){\n\t\t\tvar path = [type, id].join(\"/\");\n\t\t\tsubscriptionOptions = subscriptions__options.buildOptions(subscriptionOptions);\n\n\t\t\treturn this._addSubscription(path, RecordSubscription['default'], subscriptionOptions);\n\t\t},\n\n\t\tsubscriptions: function(){\n\t\t\treturn Object.keys(this._subscriptions);\n\t\t},\n\n\t\thasActiveSubscription: function(subscriptionPath){\n\t\t\tvar subscription = this._subscriptions[subscriptionPath];\n\t\t\treturn subscription && subscription.status === 'active';\n\t\t},\n\n\t\tunsubscribeAll: function(){\n\t\t\tvar _this = this;\n\t\t\tObject.keys(this._listeners).forEach(function(listenerKey){\n\t\t\t\tvar path = listenerKey.split(\":\")[0];\n\t\t\t\tvar eventType = listenerKey.split(\":\")[1];\n\t\t\t\tvar callback = _this._listeners[listenerKey];\n\n\t\t\t\t_this._disableListener(path, eventType, callback);\n\t\t\t});\n\t\t},\n\n\t\t_subscribeToAttribute: function(type, id, attribute){\n\t\t\tvar path = [type, id, attribute].join(\"/\");\n\t\t\treturn this._addSubscription(path, AttributeSubscription['default']);\n\t\t},\n\n\t\tsubscribeToLink: function(type, id, link, options){\n\t\t\tvar _this = this;\n\t\t\tvar linkType = this._schemaUtils.lookupLinkDef(type, link).type;\n\n\t\t\tif(linkType === 'hasOne'){\n\t\t\t\treturn this._subscribeToHasOne(type, id, link, options);\n\n\t\t\t} else if (linkType === 'hasMany'){\n\t\t\t\treturn this._subscribeToHasMany(type, id, link, options);\n\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unsupported link type: \" + linkType);\n\t\t\t}\n\n\t\t},\n\n\t\t_subscribeToHasOne: function(type, id, link, options){\n\t\t\tvar _this = this;\n\t\t\tvar path = [type, id, link].join(\"/\");\n\n\t\t\treturn this._addSubscription(path, HasOneSubscription['default'], options);\n\t\t},\n\n\t\tfindSubscription: function(path){\n\t\t\treturn this._subscriptions[path];\n\t\t},\n\n\t\t_subscribeToHasMany: function(type, id, link, options){\n\t\t\tvar _this = this;\n\t\t\tvar path = [type, id, link].join(\"/\");\n\n\t\t\treturn this._addSubscription(path, HasManySubscription['default'], options);\n\t\t},\n\n\t\t_addSubscription: function(path, SubscriptionClass, subscriptionOptions){\n\t\t\tsubscriptionOptions = subscriptions__options.buildOptions(subscriptionOptions);\n\t\t\tvar _this = this;\n\t\t\tvar subscription = this.findSubscription(path);\n\n\t\t\tif(!subscription) {\n\t\t\t\tsubscription = this._createSubscription(SubscriptionClass, path);\n\t\t\t\tthis._subscriptions[path] = subscription;\n\t\t\t}\n\n\t\t\tif(subscription.status === 'active'){\n\t\t\t\treturn this._updateSubscription(subscription, subscriptionOptions);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn this._activateSubscription(subscription, subscriptionOptions);\n\t\t\t}\n\t\t},\n\n\t\t_createSubscription: function(SubscriptionClass, path, options){\n\t\t\tvar subscription = new SubscriptionClass(path, this);\n\t\t\tsubscription.status = \"new\";\n\t\t\treturn subscription;\n\t\t},\n\n\t\t_activateSubscription: function(subscription, options){\n\t\t\tsubscription.options = options;\n\t\t\treturn subscription.activate().then(\n\t\t\t\tfunction(result){\n\t\t\t\t\tsubscription.status = \"active\";\n\t\t\t\t\treturn result;\n\n\t\t\t\t}, function(error){\n\t\t\t\t\tsubscription.status = error.code === \"PERMISSION_DENIED\" ? \"permission_denied\" : \"error\";\n\n\t\t\t\t\tif(subscription.status !== \"permission_denied\"){\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t},\n\n\t\t_updateSubscription: function(subscription, options){\n\t\t\tvar mergedOptions = this._mergeOptions(subscription.options, options);\n\t\t\tif(!eq.eq(mergedOptions, subscription.options)){\n\t\t\t\tsubscription.options = options;\n\t\t\t\treturn subscription.update();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Orbit['default'].resolve();\n\t\t\t}\n\t\t},\n\n\t\t_mergeOptions: function(current, requested){\n\t\t\treturn requested;\n\t\t},\n\n\t\t_emitDidTransform: function(operation){\n\t\t\tthis.emit(\"didTransform\", operation);\n\t\t},\n\n\t\t_enableListener: function(path, eventType, callback){\n\t\t\tvar _this = this;\n\t\t\tpath = (typeof path === 'string') ? path : path.join('/');\n\t\t\tvar key = this._buildListenerKey(path, eventType);\n\n\t\t\tif(!this._listenerInitializers[key]){\n\t\t\t\tthis._listenerInitializers[key] = new Orbit['default'].Promise(function(resolve, reject){\n\t\t\t\t\tvar wrappedCallback = function(){\n\t\t\t\t\t\tvar result = callback.apply(_this, arguments);\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t};\n\n\t\t\t\t\t_this._listeners[key] = wrappedCallback;\n\t\t\t\t\t_this._firebaseRef.child(path).on(eventType, wrappedCallback, function(error){\n\t\t\t\t\t\tdelete _this._listeners[key];\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn this._listenerInitializers[key];\n\t\t},\n\n\t\t_disableListener: function(path, eventType, callback){\n\t\t\tthis._firebaseRef.child(path).off(eventType, callback);\n\t\t},\n\n\t\t_listenerExists: function(key){\n\t\t\treturn this._listeners[key];\n\t\t},\n\n\t\t_buildListenerKey: function(path, eventType){\n\t\t\treturn [path, eventType].join(\":\");\n\t\t},\n\n\t\t_normalizePath: function(path) {\n\t\t\treturn (typeof path === 'string') ? path.split(\"/\") : path;\n\t\t}\n\t});\n\n});","define('orbit-firebase/firebase-requester', ['exports', 'orbit/lib/objects', 'orbit-firebase/lib/object-utils', 'orbit-firebase/lib/array-utils', 'orbit-firebase/lib/schema-utils', 'orbit/main', 'orbit/lib/assert', 'orbit-common/lib/exceptions'], function (exports, objects, object_utils, array_utils, SchemaUtils, Orbit, assert, exceptions) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseClient, schema, serializer){\n\t\t\tassert.assert('FirebaseSource requires Orbit.map be defined', Orbit['default'].map);\n\n\t\t\tthis._firebaseClient = firebaseClient;\n\t\t\tthis._schema = schema;\n\t\t\tthis._schemaUtils = new SchemaUtils['default'](schema);\n\t\t\tthis._serializer = serializer;\n\t\t},\n\n\t\tfind: function(type, id){\n\t\t\tif(id){\n\t\t\t\tif(objects.isArray(id)) return this._findMany(type, id);\n\t\t\t\treturn this._findOne(type, id);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn this._findAll(type);\n\t\t\t}\n\t\t},\n\n\t\tfindLink: function(type, id, link){\n\t\t\tvar linkType = this._schemaUtils.lookupLinkDef(type, link).type;\n\t\t\treturn this._firebaseClient.valueAt([type, id, link]).then(function(linkValue){\n\t\t\t\tif(linkType === 'hasMany') {\n\t\t\t\t\treturn linkValue ? Object.keys(linkValue) : [];\n\t\t\t\t}\n\t\t\t\telse if(linkType === 'hasOne') {\n\t\t\t\t\treturn linkValue;\n\t\t\t\t}\n\t\t\t\tthrow new Error(\"Links of type \" + linkType + \" not handled\");\n\t\t\t});\n\t\t},\n\n\t\tfindLinked: function(type, id, link){\n\t\t\tvar linkType = this._schemaUtils.lookupLinkDef(type, link).type;\n\t\t\tif(linkType === 'hasMany') {\n\t\t\t\treturn this._findLinkedHasMany(type, id, link);\n\t\t\t}\n\t\t\telse if(linkType === 'hasOne') {\n\t\t\t\treturn this._findLinkedHasOne(type, id, link);\n\t\t\t}\n\t\t\tthrow new Error(\"Links of type \" + linkType + \" not handled\");\n\t\t},\n\n\t\t_findOne: function(type, id){\n\t\t\tvar _this = this;\n\n\t\t\treturn _this._firebaseClient.valueAt([type, id]).then(function(record){\n\t\t\t\t// todo - is this the correct behaviour for not found?\n\t\t\t\tif(!record) throw new exceptions.RecordNotFoundException(type + \":\" + id);\n\t\t\t\treturn _this._serializer.deserialize(type, id, record);\n\t\t\t});\n\t\t},\n\n\t\t_findMany: function(type, ids){\n\t\t\tvar _this = this;\n\t\t\tvar promises = array_utils.map(ids, function(id){\n\t\t\t\treturn _this._findOne(type, id);\n\t\t\t});\n\n\t\t\treturn Orbit['default'].all(promises);\n\t\t},\n\n\t\t_findAll: function(type){\n\t\t\tvar _this = this;\n\t\t\treturn _this._firebaseClient.valueAt(type).then(function(recordsHash){\n\t\t\t\tvar records = object_utils.objectValues(recordsHash);\n\t\t\t\treturn _this._serializer.deserializeRecords(type, records);\n\t\t\t});\n\t\t},\n\n\t\t_findLinkedHasMany: function(type, id, link){\n\t\t\tvar _this = this;\n\t\t\tvar linkDef = this._schemaUtils.lookupLinkDef(type, link);\n\t\t\tvar model = linkDef.model;\n\n\t\t\treturn this.findLink(type, id, link).then(function(ids){\n\t\t\t\tvar promised = [];\n\t\t\t\tfor(var i = 0; i < ids.length; i++){\n\t\t\t\t\tpromised[i] = _this._firebaseClient.valueAt([model, ids[i]]);\n\t\t\t\t}\n\n\t\t\t\treturn _this._settleAllPermitted(promised).then(function(serialized){\n\t\t\t\t\treturn array_utils.map(serialized, function(record){\n\t\t\t\t\t\treturn _this._serializer.deserialize(model, record.id, record);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\t_settleAllPermitted: function(promises){\n\t\t\treturn new Orbit['default'].Promise(function(resolve, reject){\n\t\t\t\tOrbit['default'].allSettled(promises).then(function(settled){\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tsettled.forEach(function(promiseResult){\n\t\t\t\t\t\tif(promiseResult.state === 'rejected'){\n\t\t\t\t\t\t\tif(promiseResult.reason.code === 'PERMISSION_DENIED'){\n\t\t\t\t\t\t\t\t// filter out values that have access denied\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthrow new Error(promiseResult.reason);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(promiseResult.state === 'fulfilled'){\n\t\t\t\t\t\t\tvalues.push(promiseResult.value);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tresolve(values);\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\t_findLinkedHasOne: function(type, id, link){\n\t\t\tvar _this = this;\n\t\t\tvar linkDef = this._schemaUtils.lookupLinkDef(type, link);\n\t\t\tvar model = linkDef.model;\n\n\t\t\treturn this.findLink(type, id, link).then(function(id){\n\t\t\t\treturn _this._firebaseClient.valueAt([model, id]).then(function(serializedRecord){\n\t\t\t\t\treturn _this._serializer.deserialize(model, id, serializedRecord);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t});\n\n});","define('orbit-firebase/firebase-serializer', ['exports', 'orbit-common/serializer', 'orbit/lib/objects', 'orbit/lib/assert', 'orbit-firebase/transformations', 'orbit/main', 'orbit-common/main'], function (exports, Serializer, objects, assert, transformations, Orbit, OC) {\n\n\t'use strict';\n\n\texports['default'] = Serializer['default'].extend({\n\t\tserialize: function(type, record){\n\t\t\treturn this.serializeRecord(type, record);\n\t\t},\n\n\t\tserializeRecord: function(type, record) {\n\t\t\tassert.assert(record, \"Must provide a record\");\n\n\t\t\tvar json = {};\n\n\t\t\tthis.serializeKeys(type, record, json);\n\t\t\tthis.serializeAttributes(type, record, json);\n\t\t\tthis.serializeLinks(type, record, json);\n\n\t\t\treturn json;\n\t\t},\n\n\t\tserializeKeys: function(type, record, json) {\n\t\t\tvar modelSchema = this.schema.models[type];\n\t\t\tvar resourceKey = this.resourceKey(type);\n\t\t\tvar value = record[resourceKey];\n\n\t\t\tif (value) {\n\t\t\t\tjson[resourceKey] = value;\n\t\t\t}\n\t\t},\n\n\t\tserializeAttributes: function(type, record, json) {\n\t\t\tvar modelSchema = this.schema.models[type];\n\n\t\t\tObject.keys(modelSchema.attributes).forEach(function(attr) {\n\t\t\t\tthis.serializeAttribute(type, record, attr, json);\n\t\t\t}, this);\n\t\t},\n\n\t\tserializeAttribute: function(type, record, attr, json) {\n\t\t\tvar attrType = this.schema.models[type].attributes[attr].type;\n\t\t\tvar transformation = transformations.lookupTransformation(attrType);\n\t\t\tvar value = record[attr];\n\t\t\tvar serialized = transformation.serialize(value);\n\n\t\t\tjson[this.resourceAttr(type, attr)] = serialized;\n\t\t},\n\n\t\tserializeLinks: function(type, record, json) {\n\t\t\tvar modelSchema = this.schema.models[type];\n\t\t\tvar linkNames = Object.keys(modelSchema.links);\n\n\t\t\tlinkNames.forEach(function(link){\n\t\t\t\tvar value = record.__rel[link];\n\n\t\t\t\tif(value === OC['default'].LINK_NOT_INITIALIZED) throw new Error(\"Can't save \" + type + \"/\" + record.id + \" with \" + link + \" not loaded\");\n\n\t\t\t\tjson[link] = value;\n\t\t\t});\n\t\t},\n\n\t\tdeserializeRecords: function(type, records){\n\t\t\tvar _this = this;\n\t\t\treturn records.map(function(record){\n\t\t\t\treturn _this.deserialize(type, record.id, record);\n\t\t\t});\n\t\t},\n\n\t\tdeserialize: function(type, id, record){\n\t\t\trecord = record || {};\n\t\t\tvar data = {};\n\n\t\t\tthis.deserializeKeys(type, id, record, data);\n\t\t\tthis.deserializeAttributes(type, record, data);\n\t\t\tthis.deserializeLinks(type, record, data);\n\n\t\t\treturn this.schema.normalize(type, data, {initializeLinks: false});\n\t\t},\n\n\t\tdeserializeKeys: function(type, id, record, data){\n\t\t\tdata[this.schema.models[type].primaryKey.name] = id;\n\t\t},\n\n\t\tdeserializeAttributes: function(type, record, data){\n\t\t\tvar modelSchema = this.schema.models[type];\n\n\t\t\tObject.keys(modelSchema.attributes).forEach(function(attr) {\n\t\t\t\tthis.deserializeAttribute(type, record, attr, data);\n\t\t\t}, this);\n\t\t},\n\n\t\tdeserializeAttribute: function(type, record, attr, data){\n\t\t\tvar attrType = this.schema.models[type].attributes[attr].type;\n\t\t\tvar transformation = transformations.lookupTransformation(attrType);\n\t\t\tvar serialized = record[attr];\n\t\t\tvar deserialized = transformation.deserialize(serialized);\n\n\t\t\tdata[attr] = deserialized || null; // firebase doesn't like 'undefined' so replace with null\n\t\t},\n\n\t\tdeserializeLinks: function(type, record, data){\n\t\t\tvar _this = this;\n\t\t\tvar modelSchema = this.schema.models[type];\n\t\t\tdata.__rel = {};\n\n\t\t\t// links are only added by link subscriptions - this allows the permissions to be checked before adding them to the record\n\t\t\tObject.keys(modelSchema.links).forEach(function(link) {\n\t\t\t\tdata.__rel[link] = OC['default'].LINK_NOT_INITIALIZED;\n\t\t\t});\n\t\t},\n\n\t\tbuildHash: function(keys, value){\n\t\t\tvar hash = {};\n\n\t\t\tkeys.forEach(function(key){\n\t\t\t\thash[key] = value;\n\t\t\t});\n\n\t\t\treturn hash;\n\t\t},\n\n\t\tresourceKey: function(type) {\n\t\t\treturn 'id';\n\t\t},\n\n\t\tresourceType: function(type) {\n\t\t\treturn this.schema.pluralize(type);\n\t\t},\n\n\t\tresourceLink: function(type, link) {\n\t\t\treturn link;\n\t\t},\n\n\t\tresourceAttr: function(type, attr) {\n\t\t\treturn attr;\n\t\t}\n\t});\n\n});","define('orbit-firebase/firebase-source', ['exports', 'orbit/lib/objects', 'orbit/main', 'orbit/lib/assert', 'orbit-common/source', 'orbit-firebase/lib/array-utils', 'orbit/operation', 'orbit-firebase/firebase-client', 'orbit-firebase/firebase-requester', 'orbit-firebase/firebase-transformer', 'orbit-firebase/firebase-serializer', 'orbit-firebase/firebase-listener', 'orbit-firebase/cache-source', 'orbit-firebase/operation-matcher', 'orbit-firebase/operation-decomposer', 'orbit-firebase/operation-sequencer', 'orbit-firebase/lib/schema-utils', 'orbit-firebase/lib/operation-utils'], function (exports, objects, Orbit, assert, Source, array_utils, Operation, FirebaseClient, FirebaseRequester, FirebaseTransformer, FirebaseSerializer, FirebaseListener, CacheSource, OperationMatcher, OperationDecomposer, OperationSequencer, SchemaUtils, operation_utils) {\n\n\t'use strict';\n\n\texports['default'] = Source['default'].extend({\n\t\tnotifierName: \"firebase-source\",\n\n\t\tinit: function(schema, options){\n\t\t\tvar _this = this;\n\t\t\toptions = options || {};\n\n\t\t\tthis._super.apply(this, arguments);\n\t\t\tthis._cache.maintainInverseLinks = false;\n\n\t\t\tassert.assert('FirebaseSource requires Orbit.Promise be defined', Orbit['default'].Promise);\n\t\t\tassert.assert('FirebaseSource requires Orbit.all be defined', Orbit['default'].all);\n\t\t\tassert.assert('FirebaseSource requires Orbit.allSettled be defined', Orbit['default'].allSettled);\n\t\t\tassert.assert('FirebaseSource requires Orbit.map be defined', Orbit['default'].map);\n\t\t\tassert.assert('FirebaseSource requires Orbit.resolve be defined', Orbit['default'].resolve);\n\t\t\tassert.assert('FirebaseSource requires firebaseRef be defined', options.firebaseRef);\n\n\t\t\tvar firebaseRef = options.firebaseRef;\n\t\t\tvar serializer = new FirebaseSerializer['default'](schema);\n\t\t\tvar firebaseClient = new FirebaseClient['default'](firebaseRef);\n\n\t\t\tthis._schemaUtils = new SchemaUtils['default'](this.schema);\n\t\t\tthis._firebaseTransformer = new FirebaseTransformer['default'](firebaseClient, schema, serializer);\n\t\t\tthis._firebaseRequester = new FirebaseRequester['default'](firebaseClient, schema, serializer);\n\t\t\tthis._firebaseListener = new FirebaseListener['default'](firebaseRef, schema, serializer);\n\n\t\t\tvar cacheSource = new CacheSource['default'](this._cache);\n\t\t\tthis._operationSequencer = new OperationSequencer['default'](this._cache, schema);\n\n\t\t\tthis._firebaseListener.on('didTransform', function(operation){\n\t\t\t\t_this._operationSequencer.process(operation);\n\t\t\t});\n\n\t\t\tthis.on(\"didTransform\", function(operation){\n\t\t\t\t// console.log(\"fb.transmitting\", operation.path.join(\"/\"), operation.value);\n\t\t\t});\n\t\t},\n\n\t\tdisconnect: function(){\n\t\t\tthis._firebaseListener.unsubscribeAll();\n\t\t},\n\n\t\t_transform: function(operation){\n\t\t\t// console.log(\"fb.transform\", operation.serialize());\n\t\t\tvar _this = this;\n\n\t\t\treturn this._firebaseTransformer.transform(operation).then(function(result){\n\n\t\t\t\tif(operation.op === \"add\" && operation.path.length === 2){\n\t\t\t\t\tvar type = operation.path[0];\n\t\t\t\t\tvar allLinks = _this._schemaUtils.linksFor(type);\n\t\t\t\t\treturn _this._subscribeToRecords(type, result, {include: allLinks});\n\t\t\t\t}\n\n\t\t\t\telse if(operation.op !== \"remove\" && operation.path.length === 2){\n\t\t\t\t\toperation.value = _this.schema.normalize(operation.path[0], operation.value);\n\t\t\t\t}\n\n\t\t\t}).then(function(){\n\t\t\t\t_this._operationSequencer.process(operation);\n\t\t\t});\n\t\t},\n\n\t\t_find: function(type, id, options){\n\t\t\tvar _this = this;\n\t\t\treturn this._firebaseRequester.find(type, id).then(function(records){\n\t\t\t\tif(!id) _this._firebaseListener.subscribeToType(type, null, options);\n\n\t      return _this._subscribeToRecords(type, records, options)\n\t      .then(function(){\n\t        return _this.settleTransforms();\n\n\t      })\n\t      .then(function(){\n\t        return records;\n\n\t      });\n\t\t\t});\n\t\t},\n\n\t\t_findLink: function(type, id, link){\n\t\t\treturn this._firebaseRequester.findLink(type, id, link);\n\t\t},\n\n\t\t_findLinked: function(type, id, link, options){\n\t\t\t// console.log(\"fb._findLinked\", arguments);\n\t\t\tvar _this = this;\n\t\t\tvar linkedType = this.schema.models[type].links[link].model;\n\n\t\t\treturn this._firebaseRequester.findLinked(type, id, link).then(function(records){\n\t\t\t\treturn _this._firebaseListener.subscribeToLink(type, id, link, options)\n\t\t\t\t.then(function(){\n\t\t\t\t\treturn _this.settleTransforms();\n\n\t\t\t\t})\n\t\t\t\t.then(function(){\n\t\t\t\t\treturn records;\n\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\t_subscribeToRecords: function(type, records, options){\n\t\t\trecords = objects.isArray(records) ? records : [records];\n\t\t\treturn this._firebaseListener.subscribeToRecords(type, array_utils.pluck(records, 'id'), options);\n\t\t}\n\t});\n\n});","define('orbit-firebase/firebase-transformer', ['exports', 'orbit/lib/objects', 'orbit-firebase/transformers/add-record', 'orbit-firebase/transformers/remove-record', 'orbit-firebase/transformers/replace-attribute', 'orbit-firebase/transformers/add-to-has-many', 'orbit-firebase/transformers/add-to-has-one', 'orbit-firebase/transformers/remove-has-one', 'orbit-firebase/transformers/replace-has-many', 'orbit-firebase/transformers/remove-from-has-many', 'orbit-firebase/transformers/update-meta'], function (exports, objects, AddRecord, RemoveRecord, ReplaceAttribute, AddToHasMany, AddToHasOne, RemoveHasOne, ReplaceHasMany, RemoveFromHasMany, UpdateMeta) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseClient, schema, serializer, cache){\n\t\t\tthis._schema = schema;\n\t\t\tthis._firebaseClient = firebaseClient;\n\n\t\t\tthis._transformers = [\n\t\t\t\tnew AddRecord['default'](firebaseClient, schema, serializer),\n\t\t\t\tnew RemoveRecord['default'](firebaseClient),\n\t\t\t\tnew ReplaceAttribute['default'](firebaseClient, schema),\n\t\t\t\tnew AddToHasMany['default'](firebaseClient, schema),\n\t\t\t\tnew AddToHasOne['default'](firebaseClient, schema),\n\t\t\t\tnew RemoveHasOne['default'](firebaseClient, schema),\n\t\t\t\tnew ReplaceHasMany['default'](firebaseClient, schema),\n\t\t\t\tnew RemoveFromHasMany['default'](firebaseClient, schema),\n\t\t\t\tnew UpdateMeta['default'](cache)\n\t\t\t];\n\t\t},\n\n\t\ttransform: function(operation){\n\t\t\tvar _this = this;\n\t\t\tthis._normalizeOperation(operation);\n\n\t\t\tvar transformer = this._findTransformer(operation);\n\t\t\treturn transformer.transform(operation).then(function(result){\n\t\t\t\treturn _this._firebaseClient.push('operation', operation.serialize()).then(function(){\n\t\t\t\t\treturn result;\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t    _normalizeOperation: function(op) {\n\t      if (typeof op.path === 'string') {\n\t      \top.path = op.path.split('/');\n\t      }\n\t    },\n\n\t\t_findTransformer: function(operation){\n\t\t\tfor(var i = 0; i < this._transformers.length; i++){\n\t\t\t\tvar transformer = this._transformers[i];\n\n\t\t\t\tif(transformer.handles(operation)) {\n\t\t\t\t\t// console.log(\"using transformer\", transformer);\n\t\t\t\t\treturn transformer;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow new Error(\"Couldn't find a transformer for: \" + JSON.stringify(operation));\n\t\t}\n\t});\n\n});","define('orbit-firebase/lib/array-utils', ['exports'], function (exports) {\n\n\t'use strict';\n\n\texports.removeItem = removeItem;\n\texports.removeAt = removeAt;\n\texports.map = map;\n\texports.pluck = pluck;\n\texports.any = any;\n\texports.arrayToHash = arrayToHash;\n\n\tfunction removeItem(array, condemned){\n\t\treturn array.filter(function(item){\n\t\t\treturn item !== condemned;\n\t\t});\n\t}\n\n\tfunction removeAt(array, index){\n\t\tvar working = array.splice(0);\n\t\tworking.splice(index, 1);\n\t\treturn working;\n\t}\n\n\tfunction map(array, callback){\n\t\tvar mapped = [];\n\n\t\tfor(var i = 0; i < array.length; i++){\n\t\t\tmapped[i] = callback(array[i]);\n\t\t}\n\n\t\treturn mapped;\n\t}\n\n\tfunction pluck(array, property){\n\t\treturn map(array, function(item){\n\t\t\treturn item[property];\n\t\t});\n\t}\n\n\tfunction any(array, callback){\n\t  var item;\n\n\t  for(var i = 0; i < array.length; i++){\n\t    item = array[i];\n\t    if (callback(item) ) return true;\n\t  }\n\n\t\treturn false;\n\t}\n\n\tfunction arrayToHash(array, value){\n\t  var hash = {};\n\n\t  array.forEach(function(item){\n\t    hash[item] = value;\n\t  });\n\n\t  return hash;\n\t}\n\n});","define('orbit-firebase/lib/cache-utils', ['exports', 'orbit/lib/objects'], function (exports, objects) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(cache){\n\t\t\tthis.cache = cache;\n\t\t},\n\n\t\tretrieveLink: function(type, id, link) {\n\t\t\tvar val = this.cache.retrieve([type, id, '__rel', link]);\n\t\t\tif (val !== null && typeof val === 'object') {\n\t\t\t\tval = Object.keys(val);\n\t\t\t}\n\t\t\treturn val;\n\t\t},\n\t});\n\n});","define('orbit-firebase/lib/object-utils', ['exports'], function (exports) {\n\n\t'use strict';\n\n\texports.objectValues = objectValues;\n\n\tfunction objectValues(object){\n\t\tif(!object) return [];\n\t\treturn Object.keys(object).map(function(key){\n\t\t\treturn object[key];\n\t\t});\n\t}\n\n});","define('orbit-firebase/lib/operation-utils', ['exports', 'orbit/lib/objects', 'orbit-firebase/lib/array-utils'], function (exports, objects, array_utils) {\n\n\t'use strict';\n\n\texports.fop = fop;\n\n\tfunction formatOperation(operation){\n\t\tvar formatted = {\n\t\t\tid: operation.id,\n\t\t\top: operation.op,\n\t\t\tpath: (typeof operation.path === 'string') ? operation.path : operation.path.join(\"/\")\n\t\t};\t\n\n\t\tif(operation.value) formatted.value = operation.value;\n\n\t\treturn formatted;\n\t}\n\n\tfunction fop(operationOrOperations){\n\t\tif(objects.isArray(operationOrOperations)){\n\t\t\treturn array_utils.reduce(operationOrOperations, function(operation){\n\t\t\t\treturn formatOperation(operation);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\treturn formatOperation(operationOrOperations);\n\t\t}\n\t}\n\n});","define('orbit-firebase/lib/schema-utils', ['exports', 'orbit/lib/objects'], function (exports, objects) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(schema){\n\t\t\tthis.schema = schema;\n\t\t},\n\n\t\tlookupLinkDef: function(model, link){\n\t\t\tvar modelSchema = this.schema.models[model];\n\t\t\tif(!modelSchema) throw new Error(\"Could not find model for \" + model);\n\t\t\tvar linkDef = modelSchema.links[link];\n\t\t\tif(!linkDef) throw new Error(\"Could not find type for \" + model + \"/\" + link);\n\t\t\treturn linkDef;\n\t\t},\n\n\t\tlookupRelatedLinkDef: function(model, link){\n\t\t\tvar linkDef = this.lookupLinkDef(model, link);\n\t\t\treturn this.schema.models[linkDef.model].links[linkDef.inverse];\n\t\t},\n\n\t\tlinkTypeFor: function(model, link){\n\t\t\treturn this.lookupLinkDef(model, link).type;\n\t\t},\n\n\t\tmodelTypeFor: function(model, link){\n\t\t\treturn this.lookupLinkDef(model, link).model;\n\t\t},\n\n\t\tmodelSchema: function(type){\n\t\t\tvar modelSchema = this.schema.models[type];\n\t\t\tif(!modelSchema) throw new Error(\"No model found for \" + type);\n\t\t\treturn modelSchema;\n\t\t},\n\n\t\tlinksFor: function(model){\n\t\t\treturn Object.keys(this.modelSchema(model).links);\n\t\t},\n\n\t\tinverseLinkFor: function(model, link){\n\t\t\treturn this.lookupLinkDef(model, link).inverse;\n\t\t}\n\t});\n\n});","define('orbit-firebase/operation-decomposer', ['exports', 'orbit/lib/objects', 'orbit-firebase/operation-matcher', 'orbit-firebase/lib/schema-utils', 'orbit-firebase/lib/cache-utils', 'orbit/operation'], function (exports, objects, OperationMatcher, SchemaUtils, CacheUtils, Operation) {\n\n\t'use strict';\n\n\tfunction asHash(k,v){\n\t  var hash = {};\n\t  hash[k] = v;\n\t  return hash;\n\t}\n\n\tfunction buildObject(keys, value){\n\t\tvar hash = {};\n\t\tkeys.forEach(function(key){\n\t\t\thash[key] = value;\n\t\t});\n\t\treturn hash;\n\t}\n\n\tvar ChangeDetails = objects.Class.extend({\n\t\tinit: function(path, value, schema, cache){\n\t\t\tthis.path = path;\n\t\t\tthis.value = value;\n\t\t\tthis.schema = schema;\n\t\t\tthis.schemaUtils = new SchemaUtils['default'](schema);\t\t\n\t\t\tthis.cache = cache;\n\t\t},\n\n\t\tmodel: function(){\n\t\t\treturn this.path[0];\n\t\t},\n\n\t\tmodelId: function(){\n\t\t\treturn this.path[1];\n\t\t},\n\n\t\tlink: function(){\n\t\t\treturn this.path[3];\n\t\t},\n\n\t\tcurrentValue: function(){\n\t\t\treturn this.cache.retrieve(this.path);\n\t\t},\n\n\t\tlinkDef: function(){\n\t\t\treturn this.schemaUtils.lookupLinkDef(this.model(), this.link());\n\t\t},\n\n\t\toriginalInversePath: function(){\n\t\t\treturn [this.linkDef().model, this.currentValue(), \"__rel\", this.linkDef().inverse];\n\t\t},\n\n\t\tinverseLinkDef: function(){\n\t\t\treturn this.schemaUtils.lookupRelatedLinkDef(this.model(), this.link());\n\t\t},\n\n\t\tnewInversePath: function(){\n\t\t\treturn [this.linkDef().model, this.value, \"__rel\", this.linkDef().inverse];\n\t\t}\n\t});\n\n\tvar RelationshipResolver = objects.Class.extend({\n\t\tinit: function(schema, cache){\n\t\t\tthis.visited = [];\n\t\t\tthis.schema = schema;\n\t\t\tthis.schemaUtils = new SchemaUtils['default'](schema);\n\t\t\tthis.cache = cache;\n\t\t\tthis.cacheUtils = new CacheUtils['default'](cache);\t\t\n\t\t\tthis.operations = [];\n\t\t},\n\n\t\tvisit: function(op, path, value){\n\t\t\tif(this.hasVisited(path)) return;\n\t\t\tthis.markVisited(path);\n\n\t\t\tvar linkType = this.schemaUtils.linkTypeFor(path[0], path[3]);\n\n\t\t\tif(!path[1]) throw new Error(\"invalid modelId: \" + op + \"|\" + path + \"|\" + value);\n\n\t\t\tthis[linkType][op].call(this, path, value);\n\t\t},\n\n\t\thasVisited: function(path){\n\t\t\treturn this.visited.indexOf(path.join(\"/\")) !== -1;\n\t\t},\n\n\t\tmarkVisited: function(path){\n\t\t\tthis.visited.push(path.join(\"/\"));\n\t\t},\n\n\t\thasOne: {\n\t\t\tadd: function(path, value){\n\t\t\t\tvar changeDetails = new ChangeDetails(path, value, this.schema, this.cache);\n\n\t\t\t\tthis.operations.push(new Operation['default']({ op: 'add', path: changeDetails.path, value: changeDetails.value }));\n\t\t\t\tif(changeDetails.currentValue()){\n\t\t\t\t\tthis.visit(\"remove\", changeDetails.originalInversePath(), changeDetails.modelId());\n\t\t\t\t}\n\t\t\t\tthis.visit(\"add\", changeDetails.newInversePath(), changeDetails.modelId());\n\t\t\t},\n\n\t\t\tremove: function(path, value){\n\t\t\t\tvar changeDetails = new ChangeDetails(path, value, this.schema, this.cache);\n\t\t\t\tif(!value) return;\n\t\t\t\tthis.operations.push(new Operation['default']({ op: 'remove', path: changeDetails.path}));\n\t\t\t\tthis.visit(\"remove\", changeDetails.originalInversePath(), changeDetails.modelId());\n\t\t\t},\n\n\t\t\treplace: function(path, value){\n\t\t\t\tvar changeDetails = new ChangeDetails(path, value, this.schema, this.cache);\n\n\t\t\t\tthis.operations.push(new Operation['default']({ op: 'replace', path: changeDetails.path, value: changeDetails.value }));\n\t\t\t\tif(changeDetails.currentValue()){\n\t\t\t\t\tthis.visit(\"remove\", changeDetails.originalInversePath(), changeDetails.modelId());\n\t\t\t\t}\n\t\t\t\tthis.visit(\"add\", changeDetails.newInversePath(), changeDetails.modelId());\n\t\t\t}\n\t\t},\n\n\t\thasMany: {\n\t\t\tadd: function(path, value){\n\n\t\t\t\tvar linkDef = this.schemaUtils.lookupLinkDef(path[0], path[3]);\n\t\t\t\tvar inversePath = [linkDef.model, value, \"__rel\", linkDef.inverse];\n\n\t\t\t\tthis.operations.push(new Operation['default']({ op: 'add', path: path.concat(value), value: true }));\n\t\t\t\tthis.visit(\"add\", inversePath, path[1]);\n\t\t\t},\n\n\t\t\tremove: function(path, value){\n\t\t\t\tvar linkDef = this.schemaUtils.lookupLinkDef(path[0], path[3]);\n\t\t\t\tvar inversePath = [linkDef.model, value, \"__rel\", linkDef.inverse];\n\t\t\t\tthis.operations.push(new Operation['default']({ op: 'remove', path: path.concat(value) }));\n\t\t\t\tthis.visit(\"remove\", inversePath, path[1]);\n\t\t\t},\n\n\t\t\treplace: function(path, value){\n\t\t\t\tvar _this = this,\n\t\t\t\t\trelatedLinkDef = this.schemaUtils.lookupRelatedLinkDef(path[0], path[3]);\n\n\t\t\t\tthis.operations.push(new Operation['default']({ op: 'replace', path: path, value: buildObject(value, true) }));\n\t\t\t\t\n\t\t\t\tif(relatedLinkDef.type === 'hasMany') return;\n\n\t\t\t\tvar linkValue = this.cache.retrieve(path),\n\t\t\t\t\tcurrentValue = linkValue ? Object.keys(linkValue) : [],\n\t\t\t\t\tmodelId = path[1],\n\t\t\t\t\tlinkDef = this.schemaUtils.lookupLinkDef(path[0], path[3]);\n\t\t\t\t\n\t\t\t\tvar added = value.filter(function(id){\n\t\t\t\t\treturn currentValue.indexOf(id) === -1;\n\t\t\t\t});\n\t\t\t\tvar removed = currentValue.filter(function(id){\n\t\t\t\t\treturn value.indexOf(id) === -1;\n\t\t\t\t});\n\n\t\t\t\tadded.forEach(function(id){\n\t\t\t\t\tvar inversePath = [linkDef.model, id, \"__rel\", linkDef.inverse];\n\t\t\t\t\t_this.visit(\"add\", inversePath, modelId);\n\t\t\t\t});\n\n\t\t\t\tremoved.forEach(function(id){\n\t\t\t\t\tvar inversePath = [linkDef.model, id, \"__rel\", linkDef.inverse];\n\t\t\t\t\t_this.visit(\"remove\", inversePath, modelId);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(schema, cache){\n\t\t\tthis.schema = schema;\n\t\t\tthis.schemaUtils = new SchemaUtils['default'](schema);\n\t\t\tthis.cache = cache;\n\t\t\tthis.cacheUtils = new CacheUtils['default'](cache);\n\t\t},\n\n\t\tdecompose: function(operation){\n\t\t\tif(operation.path[2] !== \"__rel\") return [operation];\n\t\t\tvar relationshipResolver = new RelationshipResolver(this.schema, this.cache);\n\t\t\tvar normalized = this.normalize(operation);\n\t\t\trelationshipResolver.visit(normalized.op, normalized.path, normalized.value);\n\t\t\treturn relationshipResolver.operations;\n\t\t},\n\n\t\tnormalize: function(operation){\n\t\t\tvar linkDef = this.schemaUtils.lookupLinkDef(operation.path[0], operation.path[3]);\n\t\t\tvar path = operation.path;\n\n\t\t\tif([\"hasMany\", \"hasOne\"].indexOf(linkDef.type) === -1) throw new Error(\"unsupported link type: \" + linkDef.type);\n\n\t\t\tif(linkDef.type === \"hasOne\" && operation.op === \"add\") return operation;\n\t\t\tif(linkDef.type === \"hasOne\" && operation.op === \"remove\"){\n\t\t\t\treturn {\n\t\t\t\t\top: operation.op, \n\t\t\t\t\tpath: path, \n\t\t\t\t\tvalue: this.cache.retrieve(path)\n\t\t\t\t};\n\t\t\t}\n\t\t\tif(linkDef.type === \"hasMany\" && (['add', 'remove'].indexOf(operation.op) !== -1)) {\n\t\t\t\treturn { \n\t\t\t\t\top: operation.op, \n\t\t\t\t\tpath: path.slice(0,-1), \n\t\t\t\t\tvalue: path[path.length-1] \n\t\t\t\t};\n\t\t\t}\n\t\t\tif(linkDef.type === \"hasMany\" && operation.op === \"replace\"){\n\t\t\t\treturn {\n\t\t\t\t\top: operation.op,\n\t\t\t\t\tpath: operation.path,\n\t\t\t\t\tvalue: Object.keys(operation.value)\t\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn operation;\n\t\t}\n\t});\n\n});","define('orbit-firebase/operation-matcher', ['exports', 'orbit/lib/objects', 'orbit/lib/assert'], function (exports, objects, assert) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(operation, schema){\n\t\t\tassert.assert('OperationMatcher requires the operation', operation);\n\t\t\tassert.assert('OperationMatcher requires the schema', schema && schema.models);\n\n\t\t\tthis.valueType = this._determineValueType(operation.path, schema);\n\t\t\tthis.op = operation.op;\n\t\t\tthis.schema = schema;\n\t\t},\n\n\t\tmatches: function(op, valueType){\n\t\t\treturn this.op === op && this.valueType === valueType;\n\t\t},\n\n\t\t_determineValueType: function(path, schema){\n\t\t\tif(path.length === 1) return 'type';\n\t\t\tif(path.length === 2) return 'record';\n\t\t\tif(path.length === 5) return 'link';\n\t\t\tif(path.length === 4 && path[2] === \"__rel\") return 'link';\n\t\t\tif(path[2].match(/^__/)) return \"meta\";\n\n\t\t\tvar model = schema.models[path[0]];\n\t\t\tvar key = path[2];\n\t\t\tif(model.attributes[key]) return 'attribute';\n\t\t\tif(model.keys[key]) return 'key';\n\t\t\tthrow \"Unable to determine value type at: \" + path.join(\"/\");\n\t\t},\t\n\t});\n\n});","define('orbit-firebase/operation-sequencer', ['exports', 'orbit/evented', 'orbit/lib/objects', 'orbit/main', 'orbit-firebase/lib/schema-utils'], function (exports, Evented, objects, Orbit, SchemaUtils) {\n\n  'use strict';\n\n  exports['default'] = objects.Class.extend({\n    init: function(cache, schema){\n      window.operationSequencer = this;\n      Evented['default'].extend(this);\n      this._cache = cache;\n      this._schema = schema;\n      this._schemaUtils = new SchemaUtils['default'](schema);\n      this._dependents = {};\n      this._dependencies = {};\n    },\n\n    process: function(operation){\n      if(this._isRedundent(operation)) return;\n\n      var requiredPaths = this._requiredPathsFor(operation);\n      var missingPaths = this._withoutExistingPaths(requiredPaths);\n\n      if(missingPaths.length > 0){\n        this._deferOperation(operation, missingPaths);\n      }\n      else {\n        this._emit(operation);\n      }\n    },\n\n    _emit: function(operation){\n      this._cache.transform(operation);\n      this._triggerOperationsDependentOn(operation);\n    },\n\n    _isRedundent: function(operation){\n      var recordPath = [operation.path[0], operation.path[1]].join(\"/\");\n      var record = this._cache.retrieve(recordPath);\n\n      if(record && operation.path.length === 2 && operation.op !== 'remove') return true;\n      if(!record && operation.path.length === 3) return true;\n      return false;\n    },\n\n    _requiredPathsFor: function(operation){\n      if (this._isRecordOp(operation)) return [];\n\n      var recordPath = this._getRecordPath(operation);\n      if (this._isModifyAttributeOp(operation)) return [recordPath];\n      if (this._isModifyHasOneOp(operation)) return [recordPath];\n      if (this._isInitializeHasManyOp(operation)) return [recordPath];\n\n      var relatedRecordPath = this._getRelatedRecordPath(operation);\n      var linkPath = this._getLinkPath(operation);\n      if (this._isModifyHasManyOp(operation)) return [recordPath, relatedRecordPath, linkPath];\n\n      return [];\n    },\n\n    _withoutExistingPaths: function(paths){\n      var cache = this._cache;\n\n      return paths.filter(function(path){\n\n        var pathValue = cache.retrieve(path);\n        return !pathValue || pathValue === Orbit['default'].LINK_NOT_INITIALIZED;\n\n      });\n    },\n\n    _deferOperation: function(operation, paths){\n      var _this = this;\n\n      paths.forEach(function(path){\n        _this._addPathDependency(operation, path);\n      });\n    },\n\n    _addPathDependency: function(operation, path){\n      var operationPath = operation.path.join(\"/\");\n      this._dependents[path] = this._dependents[path] || [];\n      this._dependencies[operationPath] = this._dependencies[operationPath] || {};\n      this._dependents[path].push(operation);\n      this._dependencies[operationPath][path] = true;\n    },\n\n    _triggerOperationsDependentOn: function(operation){\n      var _this = this;\n      var path = operation.path.join(\"/\");\n      var dependents = this._dependents[path];\n\n      if(!dependents) {\n        return;\n      }\n\n      for(var i = 0; i < dependents.length; i++){\n        var dependentOperation = dependents[i];\n        var dependentOperationPath = dependentOperation.path.join(\"/\");\n\n        delete _this._dependencies[dependentOperationPath][path];\n\n        if(Object.keys(_this._dependencies[dependentOperationPath]).length === 0) {\n          this._emit(dependentOperation);\n        }\n      }\n\n      delete this._dependents[path];\n    },\n\n    _isRecordOp: function(operation){\n      return operation.path.length === 2;\n    },\n\n    _isInitializeHasManyOp: function(operation){\n      var path = operation.path;\n      return path.length === 4 && this._schema.linkDefinition(path[0], path[3]).type === 'hasMany';\n    },\n\n     _isModifyHasOneOp: function(operation){\n      var path = operation.path;\n      return this._schema.linkDefinition(path[0], path[3]).type === 'hasOne' && path.length === 4;\n    },\n\n    _isModifyAttributeOp: function(operation){\n      return operation.path.length === 3;\n    },\n\n    _isModifyHasManyOp: function(operation){\n      var path = operation.path;\n      return this._schema.linkDefinition(path[0], path[3]).type === 'hasMany' && path.length > 4;\n    },\n\n    _getRecordPath: function(operation){\n      return [operation.path[0], operation.path[1]].join(\"/\");\n    },\n\n    _getRelatedRecordPath: function(operation){\n      var recordType = operation.path[0];\n      var linkName = operation.path[3];\n      var linkedType = this._schema.linkDefinition(recordType, linkName).model;\n      var linkedId = operation.path.length === 5 ? operation.path[4] : operation.value;\n      return [linkedType, linkedId].join(\"/\");\n    },\n\n    _getLinkPath: function(operation){\n      return operation.path.slice(0, 4).join(\"/\");\n    }\n  });\n\n});","define('orbit-firebase/subscriptions/attribute-subscription', ['exports', 'orbit/lib/objects', 'orbit/operation', 'orbit/main', 'orbit-firebase/transformations'], function (exports, objects, Operation, Orbit, transformations) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(path, listener){\n\t\t\tthis.path = path;\n\t\t\tthis.listener = listener;\n\t\t\tthis.schema = listener._schema;\n\t\t},\n\n\t\tactivate: function(){\n\t\t\tvar _this = this,\n\t\t\t\tlistener = this.listener,\n\t\t\t\tpath = this.path,\n\t\t\t\tsplitPath = this.path.split(\"/\"),\n\t\t\t\ttype = splitPath[0],\n\t\t\t\trecordId = splitPath[1],\n\t\t\t\tattribute = splitPath[2];\n\n\t\t\treturn listener._enableListener(path, \"value\", function(snapshot){\n\t\t\t\tvar splitPath = path.split('/');\n\t\t\t\tvar model = splitPath[0];\n\t\t\t\tvar attribute = splitPath[2];\n\t\t\t\tvar attrType = _this.schema.models[model].attributes[attribute].type;\n\t\t\t\tvar transformation = transformations.lookupTransformation(attrType);\n\t\t\t\tvar serialized = snapshot.val();\n\t\t\t\tvar deserialized = transformation.deserialize(serialized);\n\n\t\t\t\tlistener._emitDidTransform(new Operation['default']({ op: 'replace', path: path, value: deserialized }));\n\t\t\t});\n\t\t},\n\n\t\tupdate: function(){\n\t\t\treturn Orbit['default'].resolve();\n\t\t}\n\t});\n\n});","define('orbit-firebase/subscriptions/has-many-subscription', ['exports', 'orbit/lib/objects', 'orbit/operation', 'orbit-firebase/lib/array-utils', 'orbit/main'], function (exports, objects, Operation, array_utils, Orbit) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(path, listener){\n\t\t\tvar splitPath = path.split('/');\n\n\t\t\tthis._path = path;\n\t\t\tthis._listener = listener;\n\t\t\tthis._type = splitPath[0];\n\t\t\tthis._recordId = splitPath[1];\n\t\t\tthis._link = splitPath[2];\n\t\t\tthis._inverseLink = listener._schemaUtils.inverseLinkFor(this._type, this._link);\n\t\t\tthis._linkType = listener._schemaUtils.modelTypeFor(this._type, this._link);\n\t\t},\n\n\t\tactivate: function(){\n\t\t\tvar _this = this;\n\t\t\tvar listener = this._listener;\n\t\t\tvar path = this._path;\n\t\t\tvar type = this._type;\n\t\t\tvar recordId = this._recordId;\n\t\t\tvar link = this._link;\n\t\t\tvar splitPath = path.split(\"/\");\n\t\t\tvar orbitPath = [splitPath[0], splitPath[1], '__rel', splitPath[2]].join(\"/\");\n\n\t\t\treturn this._addRecordListeners().then(function(allowedRecordIds){\n\t\t\t\tlistener._emitDidTransform(new Operation['default']({\n\t\t\t\t\top: 'add',\n\t\t\t\t\tpath: orbitPath,\n\t\t\t\t\tvalue: array_utils.arrayToHash(allowedRecordIds, true)\n\t\t\t\t}));\n\t\t\t}).then(function(){\n\t\t\t\tlistener._enableListener(path, \"child_added\", _this._recordAdded.bind(_this));\n\t\t\t\tlistener._enableListener(path, \"child_removed\", _this._recordRemoved.bind(_this));\n\t\t\t});\n\t\t},\n\n\t\tupdate: function(){\n\t\t\treturn this._addRecordListeners();\n\t\t},\n\n\t\t_recordAdded: function(snapshot){\n\t\t\tvar options = this.options.addInclude(this._inverseLink);\n\t\t\tvar type = this._type;\n\t\t\tvar recordId = this._recordId;\n\t\t\tvar link = this._link;\n\t\t\tvar listener = this._listener;\n\t\t\tvar linkType = this._linkType;\n\t\t\tvar linkId = snapshot.key();\n\n\t\t\tlistener.subscribeToRecord(linkType, linkId, options).then(function(){\n\t\t\t\tlistener._emitDidTransform(new Operation['default']({\n\t\t\t\t\top: 'add',\n\t\t\t\t\tpath: [type, recordId, '__rel', link, linkId].join(\"/\"),\n\t\t\t\t\tvalue: true\n\t\t\t\t}));\n\t\t\t});\n\t\t},\n\n\t\t_recordRemoved: function(snapshot){\n\t\t\tvar type = this._type;\n\t\t\tvar\tlink = this._link;\n\t\t\tvar recordId = this._recordId;\n\t\t\tvar listener = this._listener;\n\t\t\tvar\tlinkId = snapshot.key();\n\n\t\t\tlistener._emitDidTransform(new Operation['default']({\n\t\t\t\top: 'remove',\n\t\t\t\tpath: [type, recordId, '__rel', link, linkId].join(\"/\")\n\t\t\t}));\n\t\t},\n\n\t\t_addRecordListeners: function(){\n\t\t\tvar _this = this;\n\t\t\tvar path = this._path;\n\t\t\tvar listener = this._listener;\n\t\t\tvar linkType = this._linkType;\n\n\t\t\treturn listener._firebaseClient.valueAt(path).then(function(linkValue){\n\t\t\t\tvar recordIds = Object.keys(linkValue||{});\n\n\t\t\t\treturn listener.subscribeToRecords(linkType, recordIds, _this.options).then(function(){\n\t\t\t\t\treturn recordIds.filter(function(recordId){\n\t\t\t\t\t\treturn listener.hasActiveSubscription([linkType, recordId].join(\"/\"));\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t});\n\n});","define('orbit-firebase/subscriptions/has-one-subscription', ['exports', 'orbit/lib/objects', 'orbit/operation', 'orbit/main'], function (exports, objects, Operation, Orbit) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(path, listener){\n\t\t\tvar splitPath = path.split(\"/\");\n\n\t\t\tthis._path = path;\n\t\t\tthis._type = splitPath[0];\n\t\t\tthis._recordId = splitPath[1];\n\t\t\tthis._link = splitPath[2];\n\t\t\tthis._inverseLink = listener._schemaUtils.inverseLinkFor(this._type, this._link);\n\t\t\tthis._listener = listener;\n\t\t\tthis._linkType = listener._schemaUtils.modelTypeFor(this._type, this._link);\n\t\t},\n\n\t\tactivate: function(){\n\t\t\tvar _this = this;\n\t\t\tvar listener = this._listener;\n\t\t\tvar type = this._type;\n\t\t\tvar recordId = this._recordId;\n\t\t\tvar link = this._link;\n\t\t\tvar options = this.options;\n\t\t\tvar linkType = this._linkType;\n\n\t\t\treturn listener._enableListener(this._path, \"value\", function(snapshot){\n\t\t\t\tvar linkId = snapshot.val();\n\n\t\t\t\treturn linkId ? _this._replaceLink(linkId) : _this._removeLink();\n\t\t\t});\n\t\t},\n\n\t\tupdate: function(){\n\t\t\tvar _this = this;\n\t\t\tvar listener = this._listener;\n\t\t\tvar path = this._path;\n\t\t\tvar linkType = this._linkType;\n\n\t\t\treturn listener._firebaseClient.valueAt(path).then(function(linkValue){\n\t\t\t\treturn listener.subscribeToRecord(linkType, linkValue, _this.options);\n\t\t\t});\n\t\t},\n\n\t\t_replaceLink: function(linkId){\n\t\t\tvar _this = this;\n\t\t\tvar listener = this._listener;\n\t\t\tvar linkType = this._linkType;\n\t\t\tvar options = this.options.addInclude(this._inverseLink);\n\t\t\tvar type = this._type;\n\t\t\tvar link = this._link;\n\t\t\tvar path = this._path;\n\t\t\tvar recordId = this._recordId;\n\t\t\tvar orbitPath = [type, recordId, '__rel', link].join(\"/\");\n\n\t\t\treturn listener.subscribeToRecord(linkType, linkId, options).then(function(){\n\t\t\t\t_this._emitOperation(orbitPath, linkId);\n\t\t\t});\n\t\t},\n\n\t\t_removeLink: function(){\n\t\t\tvar listener = this._listener;\n\t\t\tvar type = this._type;\n\t\t\tvar recordId = this._recordId;\n\t\t\tvar link = this._link;\n\t\t\tvar orbitPath = [type, recordId, '__rel', link].join(\"/\");\n\n\t\t\tthis._emitOperation(orbitPath, null);\n\t\t},\n\n\t\t_emitOperation: function(path, value){\n\t\t\tvar op = this.linkInitialized ? 'replace' : 'add';\n\t\t\tthis.linkInitialized = true;\n\t\t\tthis._listener._emitDidTransform(new Operation['default']({op: op, path: path, value: value}));\n\t\t}\n\t});\n\n});","define('orbit-firebase/subscriptions/options', ['exports', 'orbit/lib/objects'], function (exports, objects) {\n\n  'use strict';\n\n  exports.buildOptions = buildOptions;\n\n  var Options = objects.Class.extend({\n  \tinit: function(optionsHash){\n      this.include = optionsHash.include;\n  \t},\n\n    currentIncludes: function(){\n      return Object.keys(this.include||{});\n    },\n\n    forLink: function(link){\n      var linkOptions = objects.clone(this);\n      linkOptions.include = this.include[link];\n      return new Options(linkOptions);\n    },\n\n    addInclude: function(link){\n      var options = objects.clone(this);\n      if(!options.include) options.include = {};\n      options.include[link] = {};\n      return new Options(options);\n    }\n  });\n\n  function buildOptions(optionsHash){\n    if(optionsHash instanceof Options) return optionsHash;\n\n    optionsHash = optionsHash || {};\n    var include = parseInclude(optionsHash.include);\n\n    return new Options({include: include});\n  }\n\n  function parseInclude(include){\n    if (!include) return undefined;\n    if (!objects.isArray(include)) {\n      include = [include];\n    }\n\n    var parsed = {};\n\n    include.forEach(function(inclusion){\n      var current = parsed;\n      inclusion.split(\".\").forEach(function(link){\n        current[link] = current[link] || {};\n        current = current[link];\n      });\n    });\n\n    return parsed;\n  }\n\n});","define('orbit-firebase/subscriptions/record-subscription', ['exports', 'orbit/lib/objects', 'orbit/operation', 'orbit/main'], function (exports, objects, Operation, Orbit) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(path, listener){\n\t\t\tthis.path = path;\n\t\t\tthis.listener = listener;\n\t\t},\n\n\t\tactivate: function(){\n\t\t\tvar listener = this.listener;\n\t\t\tvar path = this.path;\n\t\t\tvar splitPath = this.path.split(\"/\");\n\t\t\tvar type = splitPath[0];\n\t\t\tvar recordId = splitPath[1];\n\t\t\tvar modelSchema = listener._schemaUtils.modelSchema(type);\n\t\t\tvar options = this.options;\n\n\t\t\tvar attributePromises = Object.keys(modelSchema.attributes).map(function(attribute){\n\t\t\t\treturn listener._subscribeToAttribute(type, recordId, attribute);\n\t\t\t});\n\n\t\t\tvar linkSubscriptionPromises = options.currentIncludes().map(function(link){\n\t\t\t\treturn listener.subscribeToLink(type, recordId, link, options.forLink(link));\n\t\t\t});\n\n\t\t\tvar dependencyPromises = Orbit['default'].all([\n\t\t\t\tOrbit['default'].all(attributePromises),\n\t\t\t\tOrbit['default'].all(linkSubscriptionPromises)\n\t\t\t]);\n\n\t\t\treturn dependencyPromises.then(function(){\n\t\t\t\treturn listener._enableListener(path, \"value\", function(snapshot){\n\t\t\t\t\tvar value = snapshot.val();\n\n\t\t\t\t\tif(value){\n\t\t\t\t\t\tvar deserializedRecord = listener._serializer.deserialize(type, recordId, snapshot.val());\n\t\t\t\t\t\tlistener._emitDidTransform(new Operation['default']({ op: 'add', path: path, value: deserializedRecord }) );\n\t\t\t\t\t\treturn deserializedRecord;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlistener._emitDidTransform(new Operation['default']({ op: 'remove', path: path }));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\tupdate: function(){\n\t\t\treturn this.activate();\n\t\t}\n\t});\n\n});","define('orbit-firebase/transformations', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports.lookupTransformation = lookupTransformation;\n\n  var transformations = {\n    date: {\n      serialize: function(value){\n        return value && value.getTime();\n      },\n\n      deserialize: function(serialized){\n        return serialized && new Date(serialized);\n      }\n    },\n\n    defaultTransformation: {\n      serialize: function(value){\n        return value;\n      },\n\n      deserialize: function(serialized){\n        return serialized;\n      }\n    },\n  };\n\n  function lookupTransformation(attrType){\n    return transformations[attrType] || transformations.defaultTransformation;\n  }\n\n});","define('orbit-firebase/transformers/add-record', ['exports', 'orbit/lib/objects'], function (exports, objects) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseClient, schema, serializer){\n\t\t\tthis._firebaseClient = firebaseClient;\n\t\t\tthis._schema = schema;\n\t\t\tthis._serializer = serializer;\n\t\t},\n\n\t\thandles: function(operation){\n\t\t\treturn operation.op === \"add\" && operation.path.length === 2;\n\t\t},\n\n\t\ttransform: function(operation){\n\t\t\tvar model = operation.path[0];\n\t\t\tvar record = this._schema.normalize(model, operation.value);\n\t\t\tvar serializedRecord = this._serializer.serializeRecord(model, record);\n\n\t\t\treturn this._firebaseClient.set(operation.path, serializedRecord);\n\t\t}\n\t});\n\n});","define('orbit-firebase/transformers/add-to-has-many', ['exports', 'orbit/lib/objects', 'orbit-firebase/lib/schema-utils', 'orbit-firebase/lib/array-utils'], function (exports, objects, SchemaUtils, array_utils) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseClient, schema){\n\t\t\tthis._firebaseClient = firebaseClient;\n\t\t\tthis._schemaUtils = new SchemaUtils['default'](schema);\n\t\t},\n\n\t\thandles: function(operation){\n\t\t\tvar path = operation.path;\n\t\t\tif(path[2] !== '__rel') return; \n\t\t\tvar linkType = this._schemaUtils.lookupLinkDef(path[0], path[3]).type;\n\t\t\treturn operation.op === \"add\" && linkType === 'hasMany';\n\t\t},\n\n\t\ttransform: function(operation){\n\t\t\tvar path = array_utils.removeItem(operation.path, '__rel');\n\t\t\treturn this._firebaseClient.set(path, operation.value);\n\t\t}\n\t});\n\n});","define('orbit-firebase/transformers/add-to-has-one', ['exports', 'orbit/main', 'orbit-common/main', 'orbit/lib/objects', 'orbit-firebase/lib/schema-utils', 'orbit-firebase/lib/array-utils'], function (exports, Orbit, OC, objects, SchemaUtils, array_utils) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseClient, schema){\n\t\t\tthis._firebaseClient = firebaseClient;\n\t\t\tthis._schemaUtils = new SchemaUtils['default'](schema);\n\t\t},\n\n\t\thandles: function(operation){\n\t\t\tvar path = operation.path;\n\t\t\tif(path[2] !== '__rel') return;\n\t\t\tvar linkType = this._schemaUtils.lookupLinkDef(path[0], path[3]).type;\n\t\t\treturn [\"add\", \"replace\"].indexOf(operation.op) !== -1 && path[2] === '__rel' && linkType === 'hasOne';\n\t\t},\n\n\t\ttransform: function(operation){\n\t\t\tif(operation.value === OC['default'].LINK_NOT_INITIALIZED) return Orbit['default'].resolve();\n\n\t\t\tvar path = array_utils.removeItem(operation.path, '__rel');\n\t\t\treturn this._firebaseClient.set(path, operation.value);\n\t\t}\n\t});\n\n});","define('orbit-firebase/transformers/remove-from-has-many', ['exports', 'orbit/lib/objects', 'orbit-firebase/lib/schema-utils', 'orbit-firebase/lib/array-utils'], function (exports, objects, SchemaUtils, array_utils) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseClient, schema){\n\t\t\tthis._firebaseClient = firebaseClient;\n\t\t\tthis._schemaUtils = new SchemaUtils['default'](schema);\n\t\t},\n\n\t\thandles: function(operation){\n\t\t\tvar path = operation.path;\n\t\t\tif(path[2] !== '__rel') return;\n\t\t\tvar linkType = this._schemaUtils.lookupLinkDef(path[0], path[3]).type;\n\t\t\treturn operation.op === \"remove\" && path[2] === '__rel' && linkType === 'hasMany';\n\t\t},\n\n\t\ttransform: function(operation){\n\t\t\tvar path = array_utils.removeItem(operation.path, '__rel');\n\t\t\treturn this._firebaseClient.remove(path);\n\t\t}\n\t});\n\n});","define('orbit-firebase/transformers/remove-has-one', ['exports', 'orbit/lib/objects', 'orbit-firebase/lib/schema-utils', 'orbit-firebase/lib/array-utils'], function (exports, objects, SchemaUtils, array_utils) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseClient, schema){\n\t\t\tthis._firebaseClient = firebaseClient;\n\t\t\tthis._schemaUtils = new SchemaUtils['default'](schema);\n\t\t},\n\n\t\thandles: function(operation){\n\t\t\tvar path = operation.path;\n\t\t\tif(path[2] !== '__rel') return;\n\t\t\tvar linkType = this._schemaUtils.lookupLinkDef(path[0], path[3]).type;\n\t\t\treturn operation.op === \"remove\" && path[2] === '__rel' && linkType === 'hasOne';\n\t\t},\n\n\t\ttransform: function(operation){\n\t\t\tvar path = array_utils.removeItem(operation.path, '__rel');\n\t\t\treturn this._firebaseClient.remove(path);\n\t\t}\n\t});\n\n});","define('orbit-firebase/transformers/remove-record', ['exports', 'orbit/lib/objects'], function (exports, objects) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseClient){\n\t\t\tthis._firebaseClient = firebaseClient;\n\t\t},\n\n\t\thandles: function(operation){\n\t\t\treturn operation.op === \"remove\" && operation.path.length === 2;\n\t\t},\n\n\t\ttransform: function(operation){\n\t\t\treturn this._firebaseClient.set(operation.path, null);\n\t\t}\n\t});\n\n});","define('orbit-firebase/transformers/replace-attribute', ['exports', 'orbit/lib/objects', 'orbit-firebase/transformations'], function (exports, objects, transformations) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseClient, schema){\n\t\t\tthis._firebaseClient = firebaseClient;\n\t    this._schema = schema;\n\t\t},\n\n\t\thandles: function(operation){\n\t\t\treturn [\"replace\", \"add\"].indexOf(operation.op) !== -1 && operation.path.length === 3 && !operation.path[2].match(/^__/);\n\t\t},\n\n\t\ttransform: function(operation){\n\t    var model = operation.path[0];\n\t    var attr = operation.path[2];\n\t    var value = operation.value;\n\t    var attrType = this._schema.models[model].attributes[attr].type;\n\t    var transformation = transformations.lookupTransformation(attrType);\n\t    var serialized = transformation.serialize(value);\n\n\t\t\treturn this._firebaseClient.set(operation.path, serialized);\n\t\t}\n\t});\n\n});","define('orbit-firebase/transformers/replace-has-many', ['exports', 'orbit/main', 'orbit-common/main', 'orbit/lib/objects', 'orbit-firebase/lib/schema-utils', 'orbit-firebase/lib/array-utils'], function (exports, Orbit, OC, objects, SchemaUtils, array_utils) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseClient, schema){\n\t\t\tthis._firebaseClient = firebaseClient;\n\t\t\tthis._schemaUtils = new SchemaUtils['default'](schema);\n\t\t},\n\n\t\thandles: function(operation){\n\t\t\tvar path = operation.path;\n\t\t\tif(path[2] !== '__rel') return;\n\t\t\tvar linkType = this._schemaUtils.lookupLinkDef(path[0], path[3]).type;\n\t\t\treturn operation.op === \"replace\" && path[2] === '__rel' && linkType === 'hasMany';\n\t\t},\n\n\t\ttransform: function(operation){\n\t\t\tif(operation.value === OC['default'].LINK_NOT_INITIALIZED) return Orbit['default'].resolve();\n\n\t\t\tvar path = array_utils.removeItem(operation.path, '__rel');\n\t\t\treturn this._firebaseClient.set(path, operation.value);\n\t\t}\n\t});\n\n});","define('orbit-firebase/transformers/update-meta', ['exports', 'orbit/lib/objects', 'orbit/main'], function (exports, objects, Orbit) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(cache){\n\t\t\tthis._cache = cache;\n\t\t},\n\n\t\thandles: function(operation){\n\t\t\treturn operation.path[2].match(/^__/);\n\t\t},\n\n\t\ttransform: function(operation){\n\t\t\tconsole.log(\"applying to cache\", operation);\n\t\t\tthis._cache.transform(operation);\t\t\t\t\n\t\t\tconsole.log(\"applied to cache\", operation);\n\t\t\treturn Orbit['default'].resolve();\n\t\t}\n\t});\n\n});"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACplIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACllzrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjvNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChnJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"orbit-firebase.amd.js"}